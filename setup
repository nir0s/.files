#!/bin/bash
#
######
# This is written according to Google's shell style guide found at:
# https://google.github.io/styleguide/shell.xml
#
# Create my working Arch-based working environment.
# This will install relevant packages, clone relevant repositories,
# setup a working Python env and.. more..
#
# Every line in the script is idempotent either technically or functionally
######

######
# set -o nounset fails on undefined global variables
# set -o errexit fails on errors
# Note: https://groups.google.com/forum/?fromgroups#!topic/gnu.bash.bug/-9ySnEo1WrQ
# set -o pipeline fails if any command in any pipeline fails
# shopt -s failglob fails if any globs did not get expanded
######

# set -o nounset
# set -o errexit
# set -o pipefail
# shopt -s failglob

readonly SETUP_PATH='/tmp/.files-master'
readonly REPOS_HOME="${HOME}/repos"


function title() {
  #######################################
  # Print a title in blue
  # Arguments:
  #   The message to be printed
  #######################################

  local message="$1"

  echo -e "\e[34m#################################################\e[0m"
  echo -e "\e[34m# ${message}\e[0m"
  echo -e "\e[34m#################################################\e[0m"
}

function log() {
  #######################################
  # Print a log message in green
  # Arguments:
  #   The message to be printed
  #######################################

  local message="$1"

  echo -e "\e[32m###### ${message}\e[0m"
}

function error_exit() {
  #######################################
  # Print a title in red
  # TODO: echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
  # Arguments:
  #   The message to be printed
  #######################################
  local message="$1"

  echo "\e[91m${message}" >&2
  exit 1
}

function install_package() {
  #######################################
  # Install a package if it wasn't already installed
  # Arguments:
  #   The package to be installed
  #######################################

  local package_name="$1"

  log "Installing ${package_name}..."
  pacman -Q ${package_name} &> /dev/null
  if [[ $? -ne 0 ]]; then
    yaourt -S --noconfirm "${package_name}"
  fi
}

function is_file() {
    local file_path="$1"

    [[ -f ${file_path} ]]
}

function is_dir() {
    local dir_path="$1"

    [[ -d ${dir_path} ]]
}

function install_wmail() {
  #######################################
  # Download and install WMail, then create a link for it so that
  # it is directly accessible by running `wmail`
  # Arguments:
  #   The location where wmail will be downloaded to
  #######################################

  local download_path="${HOME}/Downloads"
  local wmail_source="https://github.com/Thomas101/wmail/releases/download/v1.3.7/WMail_1_3_7_prerelease_linux_x64.tar.gz"

  log "Installing Wmail..."
  sudo mkdir -p /opt/wmail
  # if [[ ! -f "${download_path}/wmail.tar.gz" ]]; then
  if ! is_file "${download_path}/wmail.tar.gz"; then
    log "Downloading Wmail..."
    curl -L ${wmail_source} -o "${download_path}/wmail.tar.gz"
  fi
  if [[ ! -d "/opt/wmail" ]]; then
    log "Extracting Wmail..."
    sudo tar -xzvf "${download_path}/wmail.tar.gz" -C "/opt/wmail" --strip 1
  fi
  if [[ ! -f "/usr/bin/wmail" ]]; then
    log "Linking /opt/wmail/WMail to /usr/bin/wmail..."
    sudo ln -sf "/opt/wmail/WMail" "/usr/bin/wmail"
  fi
}

function install_jq() {
  #######################################
  # Download jq so that it is accessible directly by running `jq`
  # Arguments:
  #   The location to download jq to
  #######################################

  local jq="/usr/bin/jq"
  local jq_source="https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64"

  log "Installing jq..."
  if [[ ! -f "${jq}" ]]; then
    log "Downloading jq..."
    sudo curl -L ${jq_source} -o ${jq}
  fi
  log "Setting jq execution permissions..."
  sudo chmod +x ${jq}
}

function install_vault() {
  curl https://releases.hashicorp.com/vault/0.6.1/vault_0.6.1_linux_amd64.zip
}

function install_consul() {
  curl https://releases.hashicorp.com/consul/0.7.0/consul_0.7.0_linux_amd64.zip
}

function install_sublime() {
  #######################################
  # Install and configure sublime-text-3
  # Package control, relevant packages,
  # and user configuration will be deployed
  #######################################

  install_package "sublime-text-dev"
  mkdir -p "${HOME}/.config/sublime-text-3/Packages/User"
  mkdir -p "${HOME}/.config/sublime-text-3/Installed Packages"
  cp -R \
    "${SETUP_PATH}/config/sublime-text-3/Package Control.sublime-package" \
    "${HOME}/.config/sublime-text-3/Installed Packages"
  cp -R \
    "${SETUP_PATH}/config/sublime-text-3/Package Control.sublime-settings" \
    "${HOME}/.config/sublime-text-3/Packages/User/"
  cp -R \
    "${SETUP_PATH}/config/sublime-text-3/Preferences.sublime-settings" \
    "${HOME}/.config/sublime-text-3/Packages/User/"
}

function activate_virtualenvwrapper() {
  export VIRTUALENVWRAPPER_VIRTUALENV="/usr/bin/virtualenv"
  export VIRTUALENVWRAPPER_PYTHON="/usr/bin/python2.7"
  export WORKON_HOME="${HOME}/.virtualenvs"
  source "/usr/bin/virtualenvwrapper.sh"
}

function install_packages() {
  title "Installing relevant packages..."
  mkdir -p ${HOME}/.config
  # yaourt
  install_package "vim"
  install_package "git"
  install_sublime
  install_package "fasd"
  install_package "virtualbox"
  install_package "lxc"
  install_package "vagrant"
  install_package "terminator"
  cp -R "${SETUP_PATH}/config/terminator" "${HOME}/.config/"
  install_package "google-chrome-beta"
  install_package "slack-desktop"
  install_package "dropbox"
  install_package "teamviewer"
  install_package "gnome-shell-extension-taskbar"

  # direct download
  install_wmail
  install_jq

  # install_package "ttf-roboto-mono"
  # install_consul
  # install_vault
}

function install_vagrant_plugin() {
  #######################################
  # Install a vagrant plugin if it wasn't already installed
  # Arguments:
  #   The name of the plugin to install
  #######################################

  local plugin_name="$1"

  vagrant plugin list | grep ${plugin_name} &> /dev/null
  if [[ $? -ne 0 ]]; then
    log "Installing vagrant plugin ${plugin_name}..."
    vagrant plugin install ${plugin_name}
  fi
}

function install_vagrant_plugins() {
  install_vagrant_plugin vagrant-vbguest
  install_vagrant_plugin vagrant-share
  install_vagrant_plugin vagrant-lxc
}

function pip_install() {
  #######################################
  # Install a package from PyPI if it wasn't already installed
  # Arguments:
  #   The name of the package to install
  #######################################

  local package_name="$1"

  log "Installing ${package_name}..."

  pip freeze | tr '[:upper:]' '[:lower:]' | grep ${package_name} &> /dev/null
  if [[ $? -ne 0 ]]; then
    sudo pip install ${package_name}
  fi
}

function prepare_python_env() {
  #######################################
  # Install pip for python2 and python3 and make pip2
  #######################################

  title "Setting up Python environment..."

  # Make idempotent
  if [[ ! -f '/tmp/get-pip.py' ]]; then
    log "Downloading get-pip.py..."
    curl "https://bootstrap.pypa.io/get-pip.py" -o "/tmp/get-pip.py"
  fi
  log "Installing pip for python2 and python3..."

  local=path_to_executable

  path_to_executable=$(which pip3)
  if [[ ! -x "${path_to_executable}" ]]; then
    sudo python3 "/tmp/get-pip.py"
  fi
  path_to_executable=$(which pip2)
  if [[ ! -x "${path_to_executable}" ]]; then
    sudo python2 "/tmp/get-pip.py"
  fi
  log "Making pip2 the default..."
  sudo ln -sf "/usr/bin/pip2" "/usr/bin/pip"
}

function install_common_python_packages() {
  pip_install "pip --upgrade"
  pip_install "virtualenv"
  pip_install "virtualenvwrapper"
  pip_install "wagon"
  pip_install "serv"
  pip_install "ipython"
  pip_install "distro"
  pip_install "ghost"
}

function clone_repo() {
  #######################################
  # Clone a repository if it wasn't already cloned.
  # Arguments:
  #   The github path to clone from (e.g. nir0s/distro)
  #   The destination to clone to
  #######################################

  local path="$1"
  local destination="${REPOS_HOME}/${2:-path}"

  log "Cloning ${path}..."
  if [[ ! -d "${destination}" ]]; then
    git clone "git@github.com:${path}" ${destination}
  fi
}

function create_dev_env() {
  #######################################
  # Creates a dev environment for a package by
  # cloning its repo, creating a virtualenv for it
  # and installing it in editable mode
  # Arguments:
  #   The name of the package to install
  #   The path to the cloned repo
  #######################################

  local tool="$1"
  local repo_path="${REPOS_HOME}/nir0s/${tool}"

  log "Creating development environment for ${tool}..."
  clone_repo "nir0s/${tool}"
  log "Creating virtualenv..."
  mkvirtualenv ${tool}
  log "Installing ${tool}..."
  ${HOME}/.virtualenvs/${tool}/bin/pip install -e ${repo_path}
}

function setup_private_dev_envs() {
  local personal_repos_path="${REPOS_HOME}/nir0s"

  title "Creating development environments..."
  activate_virtualenvwrapper
  mkdir -p ${personal_repos_path}

  create_dev_env "distro"
  create_dev_env "ghost"
  create_dev_env "serv"
  create_dev_env "python-packer"
  create_dev_env "logrotated"
}

function setup_cloudify_dev_env() {
  #######################################
  # Create a Cloudify work env using clue
  # Arguments:
  #   The name of the package to install
  #######################################

  title "Setting up Cloudify development environemnt..."
  local cloudify_repos_path="${REPOS_HOME}/cloudify"

  mkdir -p ${cloudify_repos_path}
  activate_virtualenvwrapper
  mkvirtualenv clue
  workon clue
  pip install clue
  clue env create -d "${REPOS_HOME}/cloudify" --clone-method ssh
  clue apply

  clone_repo "cloudify-cosmo/wagon" "cloudify/wagon"
  clone_repo "cloudify-cosmo/repex" "cloudify/repex"
  clone_repo "cloudify-cosmo/surch" "cloudify/surch"
  clone_repo "cloudify-cosmo/cloudhealth-client" "cloudify/cloudhealth-client"
}

function config_git() {
  title "Configuring git..."
  git config --global user.email "nir36g@gmail.com"
  git config --global user.name "Nir Cohen"
}

function deploy_dotfiles() {
  title "Deploying .files..."
  cp "${SETUP_PATH}/.bashrc" "${HOME}/.bashrc"
  cp "${SETUP_PATH}/.inputrc" "${HOME}/.inputrc"
}

function main() {
  title "Preparing $(hostname)..."
  install_packages
  install_vagrant_plugins
  clone_repo "nir0s/.files"
  prepare_python_env
  install_common_python_packages
  setup_private_dev_envs
  setup_cloudify_dev_env
  config_git
  deploy_dotfiles
}

main "$@"
